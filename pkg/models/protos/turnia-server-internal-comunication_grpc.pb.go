// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: turnia-server-internal-comunication.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TurniaServerInternalComunnicationClient is the client API for TurniaServerInternalComunnication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TurniaServerInternalComunnicationClient interface {
	Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectResponse, error)
}

type turniaServerInternalComunnicationClient struct {
	cc grpc.ClientConnInterface
}

func NewTurniaServerInternalComunnicationClient(cc grpc.ClientConnInterface) TurniaServerInternalComunnicationClient {
	return &turniaServerInternalComunnicationClient{cc}
}

func (c *turniaServerInternalComunnicationClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectResponse, error) {
	out := new(RedirectResponse)
	err := c.cc.Invoke(ctx, "/TurniaServerInternalComunnication/Redirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurniaServerInternalComunnicationServer is the server API for TurniaServerInternalComunnication service.
// All implementations must embed UnimplementedTurniaServerInternalComunnicationServer
// for forward compatibility
type TurniaServerInternalComunnicationServer interface {
	Redirect(context.Context, *RedirectRequest) (*RedirectResponse, error)
	mustEmbedUnimplementedTurniaServerInternalComunnicationServer()
}

// UnimplementedTurniaServerInternalComunnicationServer must be embedded to have forward compatible implementations.
type UnimplementedTurniaServerInternalComunnicationServer struct {
}

func (UnimplementedTurniaServerInternalComunnicationServer) Redirect(context.Context, *RedirectRequest) (*RedirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedTurniaServerInternalComunnicationServer) mustEmbedUnimplementedTurniaServerInternalComunnicationServer() {
}

// UnsafeTurniaServerInternalComunnicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TurniaServerInternalComunnicationServer will
// result in compilation errors.
type UnsafeTurniaServerInternalComunnicationServer interface {
	mustEmbedUnimplementedTurniaServerInternalComunnicationServer()
}

func RegisterTurniaServerInternalComunnicationServer(s grpc.ServiceRegistrar, srv TurniaServerInternalComunnicationServer) {
	s.RegisterService(&TurniaServerInternalComunnication_ServiceDesc, srv)
}

func _TurniaServerInternalComunnication_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurniaServerInternalComunnicationServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TurniaServerInternalComunnication/Redirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurniaServerInternalComunnicationServer).Redirect(ctx, req.(*RedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TurniaServerInternalComunnication_ServiceDesc is the grpc.ServiceDesc for TurniaServerInternalComunnication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TurniaServerInternalComunnication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TurniaServerInternalComunnication",
	HandlerType: (*TurniaServerInternalComunnicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Redirect",
			Handler:    _TurniaServerInternalComunnication_Redirect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "turnia-server-internal-comunication.proto",
}
